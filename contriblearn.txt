    #Imports
    import tensorflow as tf
    import numpy as np
    from sklearn.datasets import load_iris
    from sklearn.cross_validation import train_test_split
    from sklearn.metrics import classification_report, confusion_matrix
     
    # Data sets
    iris = load_iris()
    X =np.float32(iris['data']) 
    y = iris['target']
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3)
     
    # Specify that all features have real-value data
    feature_columns = [tf.contrib.layers.real_valued_column("", dimension=4)]
     
    # Build 3 layer DNN with 10, 20, 10 units respectively.
    classifier = tf.contrib.learn.DNNClassifier(feature_columns=feature_columns,
                                                hidden_units=[10, 20, 10],
                                                n_classes=3,
                                                model_dir="./output")
     
    # Fit model.
    classifier.fit(X_train, y_train, steps=2000)
     
    # Evaluate accuracy.
    accuracy_score = classifier.evaluate(X_test, y_test)["accuracy"]
    print('Accuracy: {0:f}'.format(accuracy_score))
     
    #Evaluate with classification report and confusion matrix
    iris_predictions = list(classifier.predict(X_test))
    print(classification_report(y_test,  iris_predictions))
    print('\n')
    print(confusion_matrix(y_test,  iris_predictions))
    print('\n')


